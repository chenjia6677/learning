from tools import timer

"""
有 N 阶楼梯，每次可以上 1 阶或者 2 阶，求有多少种上楼梯的方法

分析：
当只需要爬 1 阶楼梯就能到达楼顶时，有 1  种办法，即爬 1 个台阶
当只需要爬 2 阶楼梯就能到达楼顶时，有 2  种办法，即先爬 1 个台阶再爬 1 个台阶，
                                         或爬 2 个台阶
当只需要爬 3 阶楼梯就能到达楼顶时，有 3  种办法，即先爬 1 个台阶再爬 1 个台阶再爬 1 个台阶，
                                         或先爬 1 个台阶再爬 2 个台阶，
                                         或先爬 2 个台阶再爬 1 个台阶
当只需要爬 4 阶楼梯就能到达楼顶时，有 5  种办法，即先爬 1 个台阶再爬 1 个台阶再爬 1 个台阶再爬 1 个台阶，
                                         或先爬 1 个台阶再爬 1 个台阶再爬 2 个台阶，
                                         或先爬 1 个台阶再爬 2 个台阶再爬 1 个台阶，
                                         或先爬 2 个台阶再爬 1 个台阶再爬 1 个台阶，
                                         或先爬 2 个台阶再爬 2 个台阶
当只需要爬 5 阶楼梯就能到达楼顶时，有 8  种办法，即先爬 1 个台阶再爬 1 个台阶再爬 1 个台阶再爬 1 个台阶再爬 1 个台阶，
                                         或先爬 1 个台阶再爬 1 个台阶再爬 1 个台阶再爬 2 个台阶，
                                         或先爬 1 个台阶再爬 1 个台阶再爬 2 个台阶再爬 1 个台阶，
                                         或先爬 1 个台阶再爬 2 个台阶再爬 1 个台阶再爬 1 个台阶，
                                         或先爬 1 个台阶再爬 2 个台阶再爬 2 个台阶，
                                         或先爬 2 个台阶再爬 1 个台阶再爬 1 个台阶再爬 1 个台阶，
                                         或先爬 2 个台阶再爬 1 个台阶再爬 2 个台阶，
                                         或先爬 2 个台阶再爬 2 个台阶再爬 1 个台阶
当只需要爬 6 阶楼梯就能到达楼顶时，有 13 种办法，即先爬 1 个台阶再爬 1 个台阶再爬 1 个台阶再爬 1 个台阶再爬 1 个台阶再爬 1 个台阶，
                                         或先爬 1 个台阶再爬 1 个台阶再爬 1 个台阶再爬 1 个台阶再爬 2 个台阶，
                                         或先爬 1 个台阶再爬 1 个台阶再爬 1 个台阶再爬 2 个台阶再爬 1 个台阶，
                                         或先爬 1 个台阶再爬 1 个台阶再爬 2 个台阶再爬 1 个台阶再爬 1 个台阶，
                                         或先爬 1 个台阶再爬 2 个台阶再爬 1 个台阶再爬 1 个台阶再爬 1 个台阶，
                                         或先爬 1 个台阶再爬 1 个台阶再爬 2 个台阶再爬 2 个台阶，
                                         或先爬 1 个台阶再爬 2 个台阶再爬 1 个台阶再爬 2 个台阶，
                                         或先爬 1 个台阶再爬 2 个台阶再爬 2 个台阶再爬 1 个台阶，
                                         或先爬 2 个台阶再爬 1 个台阶再爬 1 个台阶再爬 1 个台阶再爬 1 个台阶，
                                         或先爬 2 个台阶再爬 1 个台阶再爬 1 个台阶再爬 2 个台阶，
                                         或先爬 2 个台阶再爬 1 个台阶再爬 2 个台阶再爬 1 个台阶，
                                         或先爬 2 个台阶再爬 2 个台阶再爬 1 个台阶再爬 1 个台阶，
                                         或先爬 2 个台阶再爬 2 个台阶再爬 2 个台阶
dp[i] = dp[i-1] + dp[i-2]
"""

"""
定义一个数组 dp 存储爬楼梯的方法数，dp[i] 表示爬到第 i 阶楼梯的方法数
因为第 i 阶楼梯可以从第 i-1 阶楼梯和 i-2 阶楼梯再走一步到达
所以爬到第 i 阶楼梯的方法数等于爬到第 i-1 阶楼梯的方法数与爬到第 i-2 阶楼梯的方法数之和
即 dp[i] = dp[i-1] + dp[i-2]
"""


class ClimStairs(object):

    @staticmethod
    @timer
    def dynamic_programming(n: int) -> int:
        """
        动态规划法
        :param n: 楼梯有多少阶
        :return: 有多少种上楼梯的方法
        """

        dp = [0] * (n + 1)
        dp[1] = 1
        dp[2] = 2

        for i in range(3, n + 1):
            dp[i] = dp[i - 1] + dp[i - 2]

        return dp[n]

    @staticmethod
    @timer
    def optimize_dp(n: int) -> int:
        """
        动态规划法空间优化版
        :param n: 楼梯有多少阶
        :return: 有多少种上楼梯的方法
        """

        a, b = 1, 2

        for i in range(3, n + 1):
            a, b = b, a + b

        return b

    def recursive(self, n: int) -> int:
        """
        递归法
        :param n: 楼梯有多少阶
        :return: 有多少种上楼梯的方法
        """
        if n <= 2:
            return n

        return self.recursive(n - 1) + self.recursive(n - 2)

    @timer
    def test_recursive(self, n):
        return self.recursive(n)

    def test(self, n: int):
        """
        测试
        :param n: 楼梯有多少阶
        :return: 有多少种上楼梯的方法
        """
        return self.dynamic_programming(n), self.optimize_dp(n), self.test_recursive(n)


if __name__ == '__main__':
    cs = ClimStairs()
    print(cs.test(40))


